{"ast":null,"code":"function trimDate(originalData, dateTrimProperty) {\n  //console.log(originalData);\n  //console.log(dateTrimProperty)\n  if (!originalData) return;\n  const cloneData = {\n    ...originalData\n  };\n  const date = cloneData[dateTrimProperty];\n  //console.log(date);\n  cloneData[dateTrimProperty] = date.split(\"T\")[0];\n  return cloneData;\n}\nconst trimDates = (originalData, dateTrimProperty) => {\n  if (!originalData) return;\n  let cloneData = [...originalData];\n  cloneData.forEach(singledata => {\n    let date = singledata[dateTrimProperty];\n    singledata[dateTrimProperty] = date.split(\"T\")[0];\n  });\n  return cloneData;\n};\nconst trimDateTimeArray = (originalData, dateTrimProperty) => {\n  if (!originalData) return;\n  let cloneData = [...originalData];\n  cloneData.forEach(singledata => {\n    let date = singledata[dateTrimProperty];\n    var splitted = date.split(\"T\");\n    singledata[dateTrimProperty] = splitted[0] + \" \" + splitted[1].split(\".\")[0];\n  });\n  return cloneData;\n};\nexport { trimDate, trimDates, trimDateTimeArray };","map":{"version":3,"names":["trimDate","originalData","dateTrimProperty","cloneData","date","split","trimDates","forEach","singledata","trimDateTimeArray","splitted"],"sources":["/Users/fabtest/Documents/project/isentcare-main/src/components/trimDate.js"],"sourcesContent":["function trimDate(originalData, dateTrimProperty) {\n  //console.log(originalData);\n  //console.log(dateTrimProperty)\n  if (!originalData) return;\n  const cloneData = { ...originalData };\n  const date = cloneData[dateTrimProperty];\n  //console.log(date);\n  cloneData[dateTrimProperty] = date.split(\"T\")[0];\n  return cloneData;\n}\n\n\nconst trimDates = (originalData, dateTrimProperty) => {\n  if (!originalData) return;\n  let cloneData = [...originalData];\n  cloneData.forEach((singledata) => {\n    let date = singledata[dateTrimProperty];\n    singledata[dateTrimProperty] = date.split(\"T\")[0];\n  });\n  return cloneData;\n};\nconst trimDateTimeArray = (originalData, dateTrimProperty) => {\n  if (!originalData) return;\n  let cloneData = [...originalData];\n  cloneData.forEach((singledata) => {\n    let date = singledata[dateTrimProperty];\n    var splitted=date.split(\"T\")\n    singledata[dateTrimProperty] = splitted[0]+\" \"+splitted[1].split(\".\")[0];\n  });\n  return cloneData;\n};\n\nexport { trimDate, trimDates,trimDateTimeArray };\n"],"mappings":"AAAA,SAASA,QAAQA,CAACC,YAAY,EAAEC,gBAAgB,EAAE;EAChD;EACA;EACA,IAAI,CAACD,YAAY,EAAE;EACnB,MAAME,SAAS,GAAG;IAAE,GAAGF;EAAa,CAAC;EACrC,MAAMG,IAAI,GAAGD,SAAS,CAACD,gBAAgB,CAAC;EACxC;EACAC,SAAS,CAACD,gBAAgB,CAAC,GAAGE,IAAI,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EAChD,OAAOF,SAAS;AAClB;AAGA,MAAMG,SAAS,GAAGA,CAACL,YAAY,EAAEC,gBAAgB,KAAK;EACpD,IAAI,CAACD,YAAY,EAAE;EACnB,IAAIE,SAAS,GAAG,CAAC,GAAGF,YAAY,CAAC;EACjCE,SAAS,CAACI,OAAO,CAAEC,UAAU,IAAK;IAChC,IAAIJ,IAAI,GAAGI,UAAU,CAACN,gBAAgB,CAAC;IACvCM,UAAU,CAACN,gBAAgB,CAAC,GAAGE,IAAI,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EACnD,CAAC,CAAC;EACF,OAAOF,SAAS;AAClB,CAAC;AACD,MAAMM,iBAAiB,GAAGA,CAACR,YAAY,EAAEC,gBAAgB,KAAK;EAC5D,IAAI,CAACD,YAAY,EAAE;EACnB,IAAIE,SAAS,GAAG,CAAC,GAAGF,YAAY,CAAC;EACjCE,SAAS,CAACI,OAAO,CAAEC,UAAU,IAAK;IAChC,IAAIJ,IAAI,GAAGI,UAAU,CAACN,gBAAgB,CAAC;IACvC,IAAIQ,QAAQ,GAACN,IAAI,CAACC,KAAK,CAAC,GAAG,CAAC;IAC5BG,UAAU,CAACN,gBAAgB,CAAC,GAAGQ,QAAQ,CAAC,CAAC,CAAC,GAAC,GAAG,GAACA,QAAQ,CAAC,CAAC,CAAC,CAACL,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EAC1E,CAAC,CAAC;EACF,OAAOF,SAAS;AAClB,CAAC;AAED,SAASH,QAAQ,EAAEM,SAAS,EAACG,iBAAiB"},"metadata":{},"sourceType":"module","externalDependencies":[]}